#pragma once

#include "efitypes.hpp"

typedef struct
{
	UINTN Signature;
	EFI_HANDLE SmmIplImageHandle;
	UINTN SmramRangeCount;
	void* SmramRanges;
	void* SmmEntryPoint;
	BOOLEAN SmmEntryPointRegistered;
	BOOLEAN InSmm;
	EFI_SMM_SYSTEM_TABLE2* Smst;
	void* CommunicationBuffer;
	UINTN BufferSize;
	EFI_STATUS ReturnStatus;
	EFI_PHYSICAL_ADDRESS PiSmmCoreImageBase;
	UINT64 PiSmmCoreImageSize;
	EFI_PHYSICAL_ADDRESS PiSmmCoreEntryPoint;
} SMM_CORE_PRIVATE_DATA;


typedef enum _ACTION {
	COPY_RAW_MEM = 0x1,
	ALLOCATE_COPY_DATA,
	ALLOCATE_COPY_EXECUTE,
	MAP_SMM_MODULE,
	UNMAP_SMM_MODULE,
	SMM_MODULE_EXEC,
	CALL,
	DISABLE_WP,
	ENABLE_WP,
	RESERVED1,
	RESERVED2,
	RESERVED3,
	PING = 0xF
} ACTION;

#pragma pack(push, 1)
typedef struct _COMBUFF {
	PVOID  Source;
	PVOID  Dest;
	UINT32 Size;
	UINT64 Action;
	UINT64 Status;
} COMBUFF, * PCOMBUFF;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct _MAPPEDMODULE {
	UINT64 Base;
	UINT64 Entry;
	UINT64 Size;
	UINT64 Pages;
	UINT64 Handle;
	EFI_LOADED_IMAGE_PROTOCOL Protocol;
} MAPPEDMODULE, * PMAPPEDMODULE;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct _CONFIG {
	PCOMBUFF CommBuffer;
	EFI_SMM_SYSTEM_TABLE2* SMST;
	UINT64 SMRT;
	UINT64 SMBase;
	UINT64 DispatchFunction;
	UINT64 MemCpy;
	UINT64 NativeExecute;
	UINT64 DebugBuffer;
	UINT64 DebugMessageSize;
	PMAPPEDMODULE Module;
} CONFIG, * PCONFIG;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct _WMIPayload
{
public:
	UINT64 WmiACPIMemAddress; //0x0000
	UINT64 WmiACPIMemAddressCpy; //0x0008
	char pad_0010[24]; //0x0010
	UINT64 gSMST_0; //0x0028
	char pad_0030[40]; //0x0030
	UINT64 InSmram; //0x0058
	UINT64 gSMRT; //0x0060
	UINT64 gSMST_1; //0x0068
	char pad_0070[3928]; //0x0070
	UINT64 Payload; //0x0FC8
} WMIPayload, *PWMIPayload; //Size: 0x0FD0
#pragma pack(pop)
