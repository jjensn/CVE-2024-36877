#pragma once

#define EFIAPI __cdecl
typedef UINT64 UINTN;
typedef UINTN RETURN_STATUS;
typedef RETURN_STATUS EFI_STATUS;
typedef GUID EFI_GUID;
typedef HANDLE EFI_HANDLE;
typedef PHYSICAL_ADDRESS EFI_PHYSICAL_ADDRESS;
typedef wchar_t CHAR16;
#define EFI_SECURITY_VIOLATION    (0x8000000000000000ULL | 26)

#define EFI_VARIABLE_NON_VOLATILE 1 
#define EFI_VARIABLE_BOOTSERVICE_ACCESS 2
#define EFI_VARIABLE_RUNTIME_ACCESS 4

typedef struct
{
    UINT64 Signature;
    UINT32 Revision;
    UINT32 HeaderSize;
    UINT32 CRC32;
    UINT32 Reserved;
} EFI_TABLE_HEADER;

typedef struct
{
    void* Read;
    void* Write;
} EFI_MM_IO_ACCESS;

typedef struct _EFI_DEVICE_PATH_PROTOCOL {
    UINT8           Type;
    UINT8           SubType;
    UINT8           Length[2];
} EFI_DEVICE_PATH_PROTOCOL;

typedef struct
{
    EFI_MM_IO_ACCESS Mem;
    EFI_MM_IO_ACCESS Io;
} EFI_SMM_CPU_IO2_PROTOCOL;

typedef struct
{
    EFI_TABLE_HEADER Hdr;
    CHAR16* SmmFirmwareVendor;
    UINT32 SmmFirmwareRevision;
    void* SmmInstallConfigurationTable;
    EFI_SMM_CPU_IO2_PROTOCOL SmmIo;
    void* SmmAllocatePool;
    void* SmmFreePool;
    void* SmmAllocatePages;
    void* SmmFreePages;
    void* SmmStartupThisAp;
    UINTN CurrentlyExecutingCpu;
    UINTN NumberOfCpus;
    UINTN* CpuSaveStateSize;
    void** CpuSaveState;
    UINTN NumberOfTableEntries;
    void* SmmConfigurationTable;
    void* SmmInstallProtocolInterface;
    void* SmmUninstallProtocolInterface;
    void* SmmHandleProtocol;
    void* SmmRegisterProtocolNotify;
    void* SmmLocateHandle;
    void* SmmLocateProtocol;
    void* SmiManage;
    void* SmiHandlerRegister;
    void* SmiHandlerUnRegister;
} EFI_SMM_SYSTEM_TABLE2;

typedef enum {
    __EfiReservedMemoryType,
    __EfiLoaderCode,
    __EfiLoaderData,
    __EfiBootServicesCode,
    __EfiBootServicesData,
    __EfiRuntimeServicesCode,
    __EfiRuntimeServicesData,
    __EfiConventionalMemory,
    __EfiUnusableMemory,
    __EfiACPIReclaimMemory,
    __EfiACPIMemoryNVS,
    __EfiMemoryMappedIO,
    __EfiMemoryMappedIOPortSpace,
    __EfiPalCode,
    __EfiPersistentMemory,
    __EfiMaxMemoryType
} EFI_MEMORY_TYPE;

typedef struct {
    ///
    /// The table header for the EFI System Table.
    ///
    EFI_TABLE_HEADER                  Hdr;
    ///
    /// A pointer to a null terminated string that identifies the vendor
    /// that produces the system firmware for the platform.
    ///
    CHAR16* FirmwareVendor;
    ///
    /// A firmware vendor specific value that identifies the revision
    /// of the system firmware for the platform.
    ///
    UINT32                            FirmwareRevision;
    ///
    /// The handle for the active console input device. This handle must support
    /// EFI_SIMPLE_TEXT_INPUT_PROTOCOL and EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL.
    ///
    EFI_HANDLE                        ConsoleInHandle;
    ///
    /// A pointer to the EFI_SIMPLE_TEXT_INPUT_PROTOCOL interface that is
    /// associated with ConsoleInHandle.
    ///
    void* ConIn;
    ///
    /// The handle for the active console output device.
    ///
    EFI_HANDLE                        ConsoleOutHandle;
    ///
    /// A pointer to the EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL interface
    /// that is associated with ConsoleOutHandle.
    ///
    void* ConOut;
    ///
    /// The handle for the active standard error console device.
    /// This handle must support the EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL.
    ///
    EFI_HANDLE                        StandardErrorHandle;
    ///
    /// A pointer to the EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL interface
    /// that is associated with StandardErrorHandle.
    ///
    void* StdErr;
    ///
    /// A pointer to the EFI Runtime Services Table.
    ///
    void* RuntimeServices;
    ///
    /// A pointer to the EFI Boot Services Table.
    ///
    void* BootServices;
    ///
    /// The number of system configuration tables in the buffer ConfigurationTable.
    ///
    UINTN                             NumberOfTableEntries;
    ///
    /// A pointer to the system configuration tables.
    /// The number of entries in the table is NumberOfTableEntries.
    ///
    void* ConfigurationTable;
} EFI_SYSTEM_TABLE;

typedef
EFI_STATUS
(EFIAPI* EFI_IMAGE_UNLOAD) (
    IN EFI_HANDLE               ImageHandle
    );

typedef struct {
    UINT32                        Revision;
    void* ParentHandle;
    EFI_SYSTEM_TABLE* SystemTable;

    // Source location of the image
    void* DeviceHandle;
    EFI_DEVICE_PATH_PROTOCOL* FilePath;
    void* Reserved;

    // Image’s load options
    UINT32                        LoadOptionsSize;
    void* LoadOptions;

    // Location where image was loaded
    void* ImageBase;
    UINT64                        ImageSize;
    EFI_MEMORY_TYPE               ImageCodeType;
    EFI_MEMORY_TYPE               ImageDataType;
    EFI_IMAGE_UNLOAD              Unload;
} EFI_LOADED_IMAGE_PROTOCOL;